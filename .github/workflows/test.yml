name: Run Tests and Deploy ExtentReport

on:
  # Automatically trigger on push to the main branch
  push:
    branches:
      - main

  # Manually trigger the workflow from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up JDK 17 for Gradle
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'

      # Step 3: Cache Gradle dependencies (optional for speed)
      - name: Cache Gradle Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Step 4: Run the tests
      - name: Run Tests
        run: ./gradlew clean test
        continue-on-error: true  # Continue even if tests fail

      # Step 5: Prepare ExtentReport for publishing
      - name: Prepare ExtentReport for Deployment
        run: |
          mkdir -p pages
          cp test-output/SparkReport.html pages/index.html

      # Step 6: Upload Pages artifact to be deployed
      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: pages

  deploy:
    # Adding the environment for Pages deployment
    environment:
      name: github-pages
    # Permissions needed to write to GitHub Pages
    permissions:
      pages: write
      id-token: write
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Deploy ExtentReport to GitHub Pages using actions/deploy-pages
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4